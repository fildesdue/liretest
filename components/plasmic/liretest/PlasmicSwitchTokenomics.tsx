// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tPqUSAvm89CQ6Ba6P7RSnu
// Component: qPlLCVDiWHD
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as pp from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: iAbJgYd3dHOG/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_liretest.module.css"; // plasmic-import: tPqUSAvm89CQ6Ba6P7RSnu/projectcss
import * as sty from "./PlasmicSwitchTokenomics.module.css"; // plasmic-import: qPlLCVDiWHD/css

export type PlasmicSwitchTokenomics__VariantMembers = {
  noLabel: "noLabel";
  isDisabled: "isDisabled";
  isChecked: "isChecked";
};

export type PlasmicSwitchTokenomics__VariantsArgs = {
  noLabel?: SingleBooleanChoiceArg<"noLabel">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  isChecked?: SingleBooleanChoiceArg<"isChecked">;
};

type VariantPropType = keyof PlasmicSwitchTokenomics__VariantsArgs;
export const PlasmicSwitchTokenomics__VariantProps = new Array<VariantPropType>(
  "noLabel",
  "isDisabled",
  "isChecked"
);

export type PlasmicSwitchTokenomics__ArgsType = {
  children?: React.ReactNode;
  name?: string;
  value?: string;
  children3?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSwitchTokenomics__ArgsType;
export const PlasmicSwitchTokenomics__ArgProps = new Array<ArgPropType>(
  "children",
  "name",
  "value",
  "children3"
);

export type PlasmicSwitchTokenomics__OverridesType = {
  root?: p.Flex<"div">;
  foreground4?: p.Flex<"div">;
  h2?: p.Flex<"h2">;
  box?: p.Flex<"div">;
  labelContainer?: p.Flex<"div">;
  toggle?: p.Flex<"div">;
  track?: p.Flex<"div">;
  thumb?: p.Flex<"div">;
  labelContainer2?: p.Flex<"div">;
  box2?: p.Flex<"div">;
  img?: p.Flex<"img">;
};

export interface DefaultSwitchTokenomicsProps extends pp.SwitchProps {
  children3?: React.ReactNode;
}

function PlasmicSwitchTokenomics__RenderFunc(props: {
  variants: PlasmicSwitchTokenomics__VariantsArgs;
  args: PlasmicSwitchTokenomics__ArgsType;
  overrides: PlasmicSwitchTokenomics__OverridesType;
  dataFetches?: PlasmicSwitchTokenomics__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const [isRootFocusVisibleWithin, triggerRootFocusVisibleWithinProps] =
    useTrigger("useFocusVisibleWithin", {
      isTextInput: false
    });

  const triggers = {
    focusVisibleWithin_root: isRootFocusVisibleWithin
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root_____focusVisibleWithin]: triggers.focusVisibleWithin_root,
        [sty.root__isChecked]: hasVariant(variants, "isChecked", "isChecked"),
        [sty.root__isDisabled]: hasVariant(
          variants,
          "isDisabled",
          "isDisabled"
        ),
        [sty.root__noLabel]: hasVariant(variants, "noLabel", "noLabel")
      })}
      data-plasmic-trigger-props={[triggerRootFocusVisibleWithinProps]}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox___5PTWo, {
          [sty.freeBox__isChecked___5PTWoOeCJy]: hasVariant(
            variants,
            "isChecked",
            "isChecked"
          ),
          [sty.freeBox__isDisabled___5PTWoGhbRh]: hasVariant(
            variants,
            "isDisabled",
            "isDisabled"
          )
        })}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"foreground4"}
          data-plasmic-override={overrides.foreground4}
          hasGap={true}
          className={classNames(defaultcss.all, sty.foreground4)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__tdaze,
              {
                [sty.freeBox__noLabel__tdazEs9Zkl]: hasVariant(
                  variants,
                  "noLabel",
                  "noLabel"
                )
              }
            )}
          >
            {hasVariant(globalVariants, "screen", "mobileOnly")
              ? "TOKENOMICS"
              : "TOKENOMICS"}
          </div>

          <h2
            data-plasmic-name={"h2"}
            data-plasmic-override={overrides.h2}
            className={classNames(defaultcss.h2, defaultcss.__wab_text, sty.h2)}
          >
            {hasVariant(globalVariants, "screen", "mobileOnly")
              ? "Redistribution made simple."
              : "BUSD Redistribution made simple."}
          </h2>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__kzGjF
            )}
          >
            {
              "The tax for each buy transaction is 15% splitted into 12% automatically distributed to all hodlers in BUSD and 3% automatically sent to liquidity pool. For every sell transaction the percentage is increased by 3% equally, obtaining 13,5% distributed to all hodlers and 4,5% sent to liquidity pool."
            }
          </div>
        </p.Stack>

        {(hasVariant(variants, "noLabel", "noLabel") ? false : true) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"box"}
            data-plasmic-override={overrides.box}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box, {
              [sty.box_____focusVisibleWithin]:
                triggers.focusVisibleWithin_root,
              [sty.box__noLabel]: hasVariant(variants, "noLabel", "noLabel")
            })}
          >
            {(hasVariant(variants, "noLabel", "noLabel") ? false : true) ? (
              <div
                data-plasmic-name={"labelContainer"}
                data-plasmic-override={overrides.labelContainer}
                className={classNames(defaultcss.all, sty.labelContainer, {
                  [sty.labelContainer_____focusVisibleWithin]:
                    triggers.focusVisibleWithin_root,
                  [sty.labelContainer__isDisabled]: hasVariant(
                    variants,
                    "isDisabled",
                    "isDisabled"
                  ),
                  [sty.labelContainer__noLabel]: hasVariant(
                    variants,
                    "noLabel",
                    "noLabel"
                  )
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "Buy fees",
                  value: args.children,
                  className: classNames(sty.slotChildren, {
                    [sty.slotChildren_____focusVisibleWithin]:
                      triggers.focusVisibleWithin_root,
                    [sty.slotChildren__isChecked]: hasVariant(
                      variants,
                      "isChecked",
                      "isChecked"
                    ),
                    [sty.slotChildren__noLabel]: hasVariant(
                      variants,
                      "noLabel",
                      "noLabel"
                    )
                  })
                })}
              </div>
            ) : null}

            <div
              data-plasmic-name={"toggle"}
              data-plasmic-override={overrides.toggle}
              className={classNames(defaultcss.all, sty.toggle, {
                [sty.toggle_____focusVisibleWithin]:
                  triggers.focusVisibleWithin_root,
                [sty.toggle__isChecked]: hasVariant(
                  variants,
                  "isChecked",
                  "isChecked"
                ),
                [sty.toggle__isDisabled]: hasVariant(
                  variants,
                  "isDisabled",
                  "isDisabled"
                )
              })}
            >
              <div
                data-plasmic-name={"track"}
                data-plasmic-override={overrides.track}
                className={classNames(defaultcss.all, sty.track, {
                  [sty.track_____focusVisibleWithin]:
                    triggers.focusVisibleWithin_root,
                  [sty.track__isChecked]: hasVariant(
                    variants,
                    "isChecked",
                    "isChecked"
                  )
                })}
              />

              <div
                data-plasmic-name={"thumb"}
                data-plasmic-override={overrides.thumb}
                className={classNames(defaultcss.all, sty.thumb, {
                  [sty.thumb_____focusVisibleWithin]:
                    triggers.focusVisibleWithin_root,
                  [sty.thumb__isChecked]: hasVariant(
                    variants,
                    "isChecked",
                    "isChecked"
                  )
                })}
              />
            </div>

            {(hasVariant(variants, "noLabel", "noLabel") ? false : true) ? (
              <div
                data-plasmic-name={"labelContainer2"}
                data-plasmic-override={overrides.labelContainer2}
                className={classNames(defaultcss.all, sty.labelContainer2, {
                  [sty.labelContainer2_____focusVisibleWithin]:
                    triggers.focusVisibleWithin_root,
                  [sty.labelContainer2__noLabel]: hasVariant(
                    variants,
                    "noLabel",
                    "noLabel"
                  )
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "Sell fees",
                  value: args.children3,
                  className: classNames(sty.slotChildren3, {
                    [sty.slotChildren3_____focusVisibleWithin]:
                      triggers.focusVisibleWithin_root,
                    [sty.slotChildren3__isChecked]: hasVariant(
                      variants,
                      "isChecked",
                      "isChecked"
                    ),
                    [sty.slotChildren3__noLabel]: hasVariant(
                      variants,
                      "noLabel",
                      "noLabel"
                    )
                  })
                })}
              </div>
            ) : null}
          </p.Stack>
        ) : null}
        {(hasVariant(variants, "noLabel", "noLabel") ? false : true) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"box2"}
            data-plasmic-override={overrides.box2}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box2, {
              [sty.box2_____focusVisibleWithin]:
                triggers.focusVisibleWithin_root,
              [sty.box2__noLabel]: hasVariant(variants, "noLabel", "noLabel")
            })}
          >
            <div className={classNames(defaultcss.all, sty.freeBox___9S2Tc)}>
              <div
                className={classNames(defaultcss.all, sty.freeBox__n8Z6I, {
                  [sty.freeBox__isChecked__n8Z6IOeCJy]: hasVariant(
                    variants,
                    "isChecked",
                    "isChecked"
                  )
                })}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox___5UvcM,
                    {
                      [sty.freeBox__isChecked___5UvcMOeCJy]: hasVariant(
                        variants,
                        "isChecked",
                        "isChecked"
                      )
                    }
                  )}
                >
                  {hasVariant(variants, "isChecked", "isChecked")
                    ? "13,5% "
                    : "12% "}
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__uIgu6,
                    {
                      [sty.freeBox__isChecked__uIgu6OeCJy]: hasVariant(
                        variants,
                        "isChecked",
                        "isChecked"
                      )
                    }
                  )}
                >
                  {"Redistributed to Holders in BUSD automatically"}
                </div>
              </div>

              <div className={classNames(defaultcss.all, sty.freeBox__dMaKr)}>
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__gIaVi,
                    {
                      [sty.freeBox__isChecked__gIaViOeCJy]: hasVariant(
                        variants,
                        "isChecked",
                        "isChecked"
                      )
                    }
                  )}
                >
                  {hasVariant(variants, "isChecked", "isChecked")
                    ? "4,5% "
                    : "3% "}
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__qk0Yj,
                    {
                      [sty.freeBox__isChecked__qk0YjOeCJy]: hasVariant(
                        variants,
                        "isChecked",
                        "isChecked"
                      )
                    }
                  )}
                >
                  {"Added to the liquidity pool"}
                </div>
              </div>
            </div>
          </p.Stack>
        ) : null}
      </p.Stack>

      {(hasVariant(variants, "isChecked", "isChecked") ? false : false) ? (
        <div
          className={classNames(defaultcss.all, sty.freeBox__okJaX, {
            [sty.freeBox__isChecked__okJaXOeCJy]: hasVariant(
              variants,
              "isChecked",
              "isChecked"
            )
          })}
        >
          {(hasVariant(variants, "isChecked", "isChecked") ? false : false) ? (
            <div
              className={classNames(defaultcss.all, sty.freeBox___4QCvn, {
                [sty.freeBox__isChecked___4QCvnOeCJy]: hasVariant(
                  variants,
                  "isChecked",
                  "isChecked"
                )
              })}
            >
              {(
                hasVariant(variants, "isChecked", "isChecked") ? false : false
              ) ? (
                <img
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(defaultcss.img, sty.img, {
                    [sty.img__isChecked]: hasVariant(
                      variants,
                      "isChecked",
                      "isChecked"
                    )
                  })}
                  role={"img"}
                  src={
                    hasVariant(variants, "isChecked", "isChecked")
                      ? "/plasmic/liretest/images/risorsa1Rank12Svg.svg"
                      : undefined
                  }
                />
              ) : null}
            </div>
          ) : null}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

function useBehavior<P extends pp.SwitchProps>(props: P, ref: pp.SwitchRef) {
  if (!("children" in props)) {
    props = {
      ...props,
      children: "Buy fees"
    };
  }

  return pp.useSwitch<P, typeof PlasmicSwitchTokenomics>(
    PlasmicSwitchTokenomics,
    props,
    {
      isCheckedVariant: { group: "isChecked", variant: "isChecked" },
      isDisabledVariant: { group: "isDisabled", variant: "isDisabled" },
      noLabelVariant: { group: "noLabel", variant: "noLabel" },
      labelSlot: "children",
      root: "root"
    },

    ref
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "foreground4",
    "h2",
    "box",
    "labelContainer",
    "toggle",
    "track",
    "thumb",
    "labelContainer2",
    "box2",
    "img"
  ],
  foreground4: ["foreground4", "h2"],
  h2: ["h2"],
  box: ["box", "labelContainer", "toggle", "track", "thumb", "labelContainer2"],
  labelContainer: ["labelContainer"],
  toggle: ["toggle", "track", "thumb"],
  track: ["track"],
  thumb: ["thumb"],
  labelContainer2: ["labelContainer2"],
  box2: ["box2"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  foreground4: "div";
  h2: "h2";
  box: "div";
  labelContainer: "div";
  toggle: "div";
  track: "div";
  thumb: "div";
  labelContainer2: "div";
  box2: "div";
  img: "img";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSwitchTokenomics__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSwitchTokenomics__VariantsArgs;
    args?: PlasmicSwitchTokenomics__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSwitchTokenomics__Fetches;
  } & Omit<PlasmicSwitchTokenomics__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSwitchTokenomics__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSwitchTokenomics__ArgProps,
      internalVariantPropNames: PlasmicSwitchTokenomics__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSwitchTokenomics__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSwitchTokenomics";
  } else {
    func.displayName = `PlasmicSwitchTokenomics.${nodeName}`;
  }
  return func;
}

export const PlasmicSwitchTokenomics = Object.assign(
  // Top-level PlasmicSwitchTokenomics renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    foreground4: makeNodeComponent("foreground4"),
    h2: makeNodeComponent("h2"),
    box: makeNodeComponent("box"),
    labelContainer: makeNodeComponent("labelContainer"),
    toggle: makeNodeComponent("toggle"),
    track: makeNodeComponent("track"),
    thumb: makeNodeComponent("thumb"),
    labelContainer2: makeNodeComponent("labelContainer2"),
    box2: makeNodeComponent("box2"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicSwitchTokenomics
    internalVariantProps: PlasmicSwitchTokenomics__VariantProps,
    internalArgProps: PlasmicSwitchTokenomics__ArgProps,

    useBehavior
  }
);

export default PlasmicSwitchTokenomics;
/* prettier-ignore-end */
